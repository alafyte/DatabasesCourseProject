CREATE OR REPLACE PACKAGE USER_PACKAGE AS
    FUNCTION INSERT_PERSONAL_DATA(
        FULL_NAME PERSONAL_DATA.FULL_NAME%TYPE,
        EMAIL PERSONAL_DATA.EMAIL%TYPE,
        PHONE_NUMBER PERSONAL_DATA.PHONE_NUMBER%TYPE,
        DATE_OF_BIRTH IN VARCHAR2
    ) RETURN NUMBER;
    PROCEDURE REGISTER_USER(
        FULL_NAME PERSONAL_DATA.FULL_NAME%TYPE,
        EMAIL PERSONAL_DATA.EMAIL%TYPE,
        PHONE_NUMBER PERSONAL_DATA.PHONE_NUMBER%TYPE,
        DATE_OF_BIRTH IN VARCHAR2,
        PASSWORD IN VARCHAR2
    );
    FUNCTION GET_PRODUCT_BY_ID(PROD_ID INT) RETURN TABLE_MENU;
    PROCEDURE FIND_NEAREST_RESTAURANT(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER,
        P_NEAREST_RESTAURANT OUT VARCHAR2
    );
    FUNCTION GET_ITEMS_BY_ORDER(P_ORDER_ID INT) RETURN TABLE_ORDER_ITEM;
    PROCEDURE DELETE_ORPHAN_USER_ORDERS;
    FUNCTION GET_ORDERS_BY_USER(P_USER_ID INT) RETURN TABLE_ORDER;
    FUNCTION CREATE_USER_ORDER(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER,
        P_USER_ID INT,
        P_ADDRESS NVARCHAR2
    ) RETURN NUMBER;
    PROCEDURE MOVE_CART_ITEMS_TO_ORDER(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER,
        P_USER_ID INT,
        P_ADDRESS NVARCHAR2,
        P_CART_ID INT);
    FUNCTION GET_COURIER_FOR_ORDER(REST_ID INT) RETURN INT;
    FUNCTION FIND_RESTAURANT_BY_LOCATION(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER
    ) RETURN INT;
    PROCEDURE PURGE_CART(
        P_ID INT
    );
    PROCEDURE DELETE_ITEM_FROM_CART(
        P_ID INT
    );
    PROCEDURE UPDATE_CART_ITEM_QUANTITY(
        P_CART_ITEM_ID INT,
        P_NEW_QUANTITY INT
    );
    PROCEDURE UPDATE_PERSONAL_DATA(
        P_ID INT,
        P_FULL_NAME NVARCHAR2 DEFAULT NULL,
        P_EMAIL VARCHAR2 DEFAULT NULL,
        P_PHONE_NUMBER VARCHAR2 DEFAULT NULL,
        P_DATE_OF_BIRTH VARCHAR2 DEFAULT NULL
    );
    FUNCTION GET_CART_ID_BY_USER_ID(P_USER_ID INT) RETURN INT;
    FUNCTION GET_CART_BY_USER_ID(P_USER_ID INT) RETURN TABLE_CART_ITEM;
    PROCEDURE ADD_TO_CART(
        P_CART_ID INT,
        P_MENU_ITEM_ID INT,
        P_MENU_ITEM_SIZE INT
    );
    FUNCTION GET_MENU_ITEMS_PAGE(
        P_PAGE_NUMBER INT,
        P_PAGE_SIZE INT
    ) RETURN TABLE_MENU;
    FUNCTION INSERT_MENU_ITEM_INFO(
        P_MENU_ITEM_ID INT,
        P_MENU_ITEM_SIZE SMALLINT
    ) RETURN INT;
END USER_PACKAGE;



CREATE OR REPLACE PACKAGE BODY USER_PACKAGE AS
    FUNCTION INSERT_PERSONAL_DATA(
        FULL_NAME PERSONAL_DATA.FULL_NAME%TYPE,
        EMAIL PERSONAL_DATA.EMAIL%TYPE,
        PHONE_NUMBER PERSONAL_DATA.PHONE_NUMBER%TYPE,
        DATE_OF_BIRTH IN VARCHAR2
    ) RETURN NUMBER
        IS
        DATA_ID PERSONAL_DATA.ID%TYPE;
    BEGIN
        INSERT INTO PERSONAL_DATA (FULL_NAME, EMAIL, PHONE_NUMBER, DATE_OF_BIRTH)
        VALUES (FULL_NAME, EMAIL, PHONE_NUMBER, TO_DATE(DATE_OF_BIRTH, 'DD-MM-YYYY'))
        RETURNING ID INTO DATA_ID;
        COMMIT;
        RETURN DATA_ID;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Произошла ошибка: ' || SQLERRM);
    END INSERT_PERSONAL_DATA;

    PROCEDURE REGISTER_USER(
        FULL_NAME PERSONAL_DATA.FULL_NAME%TYPE,
        EMAIL PERSONAL_DATA.EMAIL%TYPE,
        PHONE_NUMBER PERSONAL_DATA.PHONE_NUMBER%TYPE,
        DATE_OF_BIRTH IN VARCHAR2,
        PASSWORD IN VARCHAR2
    )
        IS
        USER_ROLE_ID USER_ROLE.ID%TYPE;
        USER_DATA_ID PERSONAL_DATA.ID%TYPE;
        USER_ID      APP_USER.ID%TYPE;
    BEGIN
        SELECT ID INTO USER_ROLE_ID FROM USER_ROLE WHERE ROLE_NAME = 'user';
        USER_DATA_ID := INSERT_PERSONAL_DATA(FULL_NAME => FULL_NAME, EMAIL => EMAIL, PHONE_NUMBER => PHONE_NUMBER,
                                             DATE_OF_BIRTH => DATE_OF_BIRTH);
        INSERT INTO APP_USER (PASSWORD_HASH, USER_ROLE, PERSONAL_DATA)
        VALUES (PASSWORD, USER_ROLE_ID, USER_DATA_ID)
        RETURNING ID INTO USER_ID;

        INSERT INTO CART (USER_ID) VALUES (USER_ID);
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Произошла ошибка: ' || SQLERRM);
    END REGISTER_USER;

    FUNCTION GET_PRODUCT_BY_ID(PROD_ID INT) RETURN TABLE_MENU IS
        V_RESULT TABLE_MENU := TABLE_MENU();
    BEGIN
        SELECT RECORD_MENU(
                       ID,
                       ITEM_NAME,
                       SMALL_SIZE_PRICE,
                       DESCRIPTION,
                       ITEM_IMAGE
                   ) BULK COLLECT
        INTO V_RESULT
        FROM MENU
        WHERE MENU.ID = PROD_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_PRODUCT_BY_ID;

    PROCEDURE FIND_NEAREST_RESTAURANT(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER,
        P_NEAREST_RESTAURANT OUT VARCHAR2
    ) IS
        V_USER_LOCATION SDO_GEOMETRY;
    BEGIN

        BEGIN
            V_USER_LOCATION := SDO_GEOMETRY(
                    2001,
                    4326,
                    SDO_POINT_TYPE(P_USER_LONGITUDE, P_USER_LATITUDE, NULL),
                    NULL,
                    NULL
                );
        END;

        SELECT R.ADDRESS
        INTO P_NEAREST_RESTAURANT
        FROM RESTAURANT R
        WHERE SDO_NN(R.LOCATION, V_USER_LOCATION, 'SDO_NUM_RES=1', 1) = 'TRUE';

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END FIND_NEAREST_RESTAURANT;

    FUNCTION GET_ITEMS_BY_ORDER(P_ORDER_ID INT) RETURN TABLE_ORDER_ITEM IS
        V_RESULT TABLE_ORDER_ITEM := TABLE_ORDER_ITEM();
    BEGIN
        SELECT RECORD_ORDER_ITEM(
                       ID,
                       MENU_ITEM_ID,
                       ITEM_SIZE,
                       MARKUP,
                       ITEM_QUANTITY
                   ) BULK COLLECT
        INTO V_RESULT
        FROM GET_ORDER_ITEMS
        WHERE ORDER_ID = P_ORDER_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_ITEMS_BY_ORDER;


    FUNCTION GET_ORDERS_BY_USER(P_USER_ID INT) RETURN TABLE_ORDER IS
        V_RESULT TABLE_ORDER := TABLE_ORDER();
    BEGIN
        SELECT RECORD_ORDER(
                       ID,
                       DATE_OF_ORDER,
                       USER_ID,
                       ADDRESS
                   ) BULK COLLECT
        INTO V_RESULT
        FROM GET_ORDERS_INFO
        WHERE USER_ID = P_USER_ID
        ORDER BY ID DESC;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_ORDERS_BY_USER;

    PROCEDURE DELETE_ORPHAN_USER_ORDERS IS
    BEGIN
        FOR user_order_rec IN (SELECT uo.ID
                               FROM USER_ORDER uo
                                        LEFT JOIN ORDER_ITEM oi ON uo.ID = oi.ORDER_ID
                               WHERE oi.ID IS NULL)
            LOOP
                DELETE FROM USER_ORDER WHERE ID = user_order_rec.ID;
            END LOOP;
        COMMIT;
    END DELETE_ORPHAN_USER_ORDERS;

    FUNCTION GET_COURIER_FOR_ORDER(REST_ID INT) RETURN INT IS
        V_COURIER_ID INT;
    BEGIN
        SELECT COURIER.ID
        INTO V_COURIER_ID
        FROM COURIER
                 JOIN PERSONAL_DATA PD ON PD.ID = COURIER.PERSONAL_DATA
                 LEFT JOIN USER_ORDER UO ON UO.COURIER_ID = COURIER.ID AND TRUNC(UO.DATE_OF_ORDER) = TRUNC(SYSDATE)
        WHERE COURIER.RESTAURANT = REST_ID
          AND COURIER.ACTIVE = 1
          AND COURIER.READY_TO_GO = 1
        GROUP BY COURIER.ID
        ORDER BY COUNT(UO.ID)
            FETCH FIRST 1 ROWS ONLY;
        RETURN V_COURIER_ID;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_COURIER_FOR_ORDER;

    FUNCTION FIND_RESTAURANT_BY_LOCATION(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER
    ) RETURN INT IS
        V_USER_LOCATION SDO_GEOMETRY;
        P_RESTAURANT_ID INT;
    BEGIN
        V_USER_LOCATION := SDO_GEOMETRY(
                2001,
                4326,
                SDO_POINT_TYPE(P_USER_LONGITUDE, P_USER_LATITUDE, NULL),
                NULL,
                NULL
            );
        SELECT R.ID
        INTO P_RESTAURANT_ID
        FROM RESTAURANT R
        WHERE SDO_RELATE(R.COVERAGE_AREA, V_USER_LOCATION, 'MASK=ANYINTERACT') = 'TRUE'
          AND ROWNUM = 1;
        RETURN P_RESTAURANT_ID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            P_RESTAURANT_ID := NULL;
            RETURN P_RESTAURANT_ID;
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'ПРОИЗОШЛА ОШИБКА: ' || SQLERRM);
    END FIND_RESTAURANT_BY_LOCATION;


    FUNCTION CREATE_USER_ORDER(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER,
        P_USER_ID INT,
        P_ADDRESS NVARCHAR2
    ) RETURN NUMBER IS
        REST_ID             INT;
        COURIER_ID          INT;
        RESULT_ID           INT;
        DELIVERY_START_TIME TIMESTAMP;
        DELIVERY_END_TIME   TIMESTAMP;
        CURRENT_TIME        TIMESTAMP;
    BEGIN

        REST_ID := FIND_RESTAURANT_BY_LOCATION(P_USER_LATITUDE, P_USER_LONGITUDE);

        IF REST_ID IS NULL THEN
            RAISE_APPLICATION_ERROR('-20002', 'Пользователь вне области доставки.');
        END IF;

        SELECT DELIVERY_START_TIME, DELIVERY_END_TIME
        INTO DELIVERY_START_TIME, DELIVERY_END_TIME
        FROM RESTAURANT
        WHERE ID = REST_ID;

        CURRENT_TIME := SYSTIMESTAMP;

        IF (DELIVERY_START_TIME < DELIVERY_END_TIME AND
            (CURRENT_TIME <= DELIVERY_START_TIME OR CURRENT_TIME >= DELIVERY_END_TIME)) OR
           (DELIVERY_START_TIME > DELIVERY_END_TIME AND
            (CURRENT_TIME <= DELIVERY_START_TIME AND CURRENT_TIME >= DELIVERY_END_TIME)) THEN
            RAISE_APPLICATION_ERROR('-20002', 'Время заказа не входит в промежуток работы службы доставки.');
        END IF;

        COURIER_ID := GET_COURIER_FOR_ORDER(REST_ID);

        IF COURIER_ID IS NULL THEN
            RAISE_APPLICATION_ERROR('-20002', 'Нет свободных курьеров');
        END IF;

        UPDATE COURIER
        SET READY_TO_GO = 0
        WHERE ID = COURIER_ID;

        INSERT INTO USER_ORDER (DATE_OF_ORDER, USER_ID, ADDRESS, COURIER_ID)
        VALUES (CURRENT_TIMESTAMP, P_USER_ID, P_ADDRESS, COURIER_ID)
        RETURNING USER_ORDER.ID
            INTO RESULT_ID;
        COMMIT;
        RETURN RESULT_ID;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END CREATE_USER_ORDER;


    PROCEDURE MOVE_CART_ITEMS_TO_ORDER(
        P_USER_LATITUDE NUMBER,
        P_USER_LONGITUDE NUMBER,
        P_USER_ID INT,
        P_ADDRESS NVARCHAR2,
        P_CART_ID INT) IS
        ORDER_ID INT;
    BEGIN

        ORDER_ID := CREATE_USER_ORDER(P_USER_LATITUDE, P_USER_LONGITUDE, P_USER_ID, P_ADDRESS);

        IF ORDER_ID IS NULL THEN
            RAISE_APPLICATION_ERROR('-20003', 'Заказ не существует');
        END IF;

        FOR CART_REC IN (SELECT * FROM CART_ITEM WHERE CART_ID = P_CART_ID)
            LOOP
                INSERT INTO ORDER_ITEM (ITEM_INFO, ORDER_ID, ITEM_QUANTITY)
                VALUES (CART_REC.ITEM_INFO, ORDER_ID, CART_REC.ITEM_QUANTITY);
            END LOOP;

        PURGE_CART(P_CART_ID);

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END MOVE_CART_ITEMS_TO_ORDER;

    PROCEDURE PURGE_CART(
        P_ID INT
    ) IS
    BEGIN
        DELETE FROM CART_ITEM WHERE CART_ID = P_ID;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END PURGE_CART;

    PROCEDURE DELETE_ITEM_FROM_CART(
        P_ID INT
    ) IS
        V_COUNT INT;
    BEGIN
        SELECT COUNT(*) INTO V_COUNT FROM CART_ITEM WHERE ID = P_ID;

        IF V_COUNT = 0 THEN
            RAISE_APPLICATION_ERROR('-20002', 'Товар с указанным ID не существует.');
        END IF;
        DELETE FROM CART_ITEM WHERE ID = P_ID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END DELETE_ITEM_FROM_CART;

    PROCEDURE UPDATE_CART_ITEM_QUANTITY(
        P_CART_ITEM_ID INT,
        P_NEW_QUANTITY INT
    ) IS
        V_ITEM_EXISTS    INT;
        CURRENT_QUANTITY INT;
        V_TOTAL_QUANTITY INT;
        P_CART_ID        INT;
    BEGIN
        BEGIN
            SELECT 1 INTO V_ITEM_EXISTS FROM CART_ITEM WHERE ID = P_CART_ITEM_ID;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR('-20001', 'Товар с указанным ID не существует.');
        END;

        IF P_NEW_QUANTITY > 0 THEN
            SELECT CART_ID INTO P_CART_ID FROM CART_ITEM WHERE ID = P_CART_ITEM_ID;
            SELECT SUM(ITEM_QUANTITY) INTO V_TOTAL_QUANTITY FROM CART_ITEM WHERE CART_ID = P_CART_ID;
            IF V_TOTAL_QUANTITY >= 10 THEN
                RAISE_APPLICATION_ERROR('-20001', 'Общее количество товаров в корзине не должно превышать 10 шт');
            END IF;
        END IF;

        SELECT ITEM_QUANTITY INTO CURRENT_QUANTITY FROM CART_ITEM WHERE ID = P_CART_ITEM_ID;

        IF (P_NEW_QUANTITY + CURRENT_QUANTITY = 0) THEN
            DELETE FROM CART_ITEM WHERE ID = P_CART_ITEM_ID;
        END IF;
        IF (P_NEW_QUANTITY + CURRENT_QUANTITY <= 10) THEN
            UPDATE CART_ITEM
            SET ITEM_QUANTITY = ITEM_QUANTITY + P_NEW_QUANTITY
            WHERE ID = P_CART_ITEM_ID;
        END IF;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END UPDATE_CART_ITEM_QUANTITY;

    FUNCTION GET_CART_ID_BY_USER_ID(P_USER_ID INT) RETURN INT
        IS
        V_RESULT INT;
    BEGIN
        SELECT ID
        INTO V_RESULT
        FROM CART
        WHERE USER_ID = P_USER_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_CART_ID_BY_USER_ID;

    FUNCTION GET_CART_BY_USER_ID(P_USER_ID INT) RETURN TABLE_CART_ITEM IS
        V_RESULT TABLE_CART_ITEM := TABLE_CART_ITEM();
    BEGIN
        SELECT RECORD_CART_ITEM(
                       CART_ID,
                       ITEM_ID,
                       USER_ID,
                       MENU_ITEM_ID,
                       ITEM_SIZE,
                       MARKUP,
                       ITEM_QUANTITY
                   ) BULK COLLECT
        INTO V_RESULT
        FROM GET_CART_INFO
        WHERE USER_ID = P_USER_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_CART_BY_USER_ID;

    FUNCTION INSERT_MENU_ITEM_INFO(
        P_MENU_ITEM_ID INT,
        P_MENU_ITEM_SIZE SMALLINT
    ) RETURN INT IS
        V_MENU_ITEM_INFO_ID INT;
    BEGIN
        BEGIN
            SELECT ID
            INTO V_MENU_ITEM_INFO_ID
            FROM MENU_ITEM_INFO
            WHERE MENU_ITEM_ID = P_MENU_ITEM_ID
              AND MENU_ITEM_SIZE = P_MENU_ITEM_SIZE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                V_MENU_ITEM_INFO_ID := NULL;
        END;

        IF V_MENU_ITEM_INFO_ID IS NULL THEN
            INSERT INTO MENU_ITEM_INFO (MENU_ITEM_ID, MENU_ITEM_SIZE)
            VALUES (P_MENU_ITEM_ID, P_MENU_ITEM_SIZE)
            RETURNING ID INTO V_MENU_ITEM_INFO_ID;
        END IF;
        COMMIT;

        RETURN V_MENU_ITEM_INFO_ID;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END INSERT_MENU_ITEM_INFO;

    PROCEDURE UPDATE_PERSONAL_DATA(
        P_ID INT,
        P_FULL_NAME NVARCHAR2 DEFAULT NULL,
        P_EMAIL VARCHAR2 DEFAULT NULL,
        P_PHONE_NUMBER VARCHAR2 DEFAULT NULL,
        P_DATE_OF_BIRTH VARCHAR2 DEFAULT NULL
    ) IS
        V_DATE DATE;
    BEGIN
        BEGIN
            IF P_DATE_OF_BIRTH IS NOT NULL THEN
                V_DATE := TO_DATE(P_DATE_OF_BIRTH, 'DD-MM-YYYY');
            ELSE
                V_DATE := NULL;
            END IF;
        END;

        UPDATE PERSONAL_DATA
        SET FULL_NAME     = COALESCE(P_FULL_NAME, FULL_NAME),
            EMAIL         = COALESCE(P_EMAIL, EMAIL),
            PHONE_NUMBER  = COALESCE(P_PHONE_NUMBER, PHONE_NUMBER),
            DATE_OF_BIRTH = COALESCE(V_DATE, DATE_OF_BIRTH)
        WHERE ID = P_ID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END UPDATE_PERSONAL_DATA;

    FUNCTION GET_MENU_ITEMS_PAGE(
        P_PAGE_NUMBER INT,
        P_PAGE_SIZE INT
    ) RETURN TABLE_MENU AS
        L_MENU_ITEMS  TABLE_MENU := TABLE_MENU();
        L_START_INDEX INT;
        L_END_INDEX   INT;
    BEGIN
        L_START_INDEX := (P_PAGE_NUMBER - 1) * P_PAGE_SIZE + 1;
        L_END_INDEX := P_PAGE_NUMBER * P_PAGE_SIZE;

        FOR R IN (
            SELECT *
            FROM (SELECT M.*,
                         ROW_NUMBER() OVER (ORDER BY ID) AS ROW_NUM
                  FROM MENU M)
            WHERE ROW_NUM >= L_START_INDEX
              AND ROW_NUM <= L_END_INDEX
            )
            LOOP
                L_MENU_ITEMS.EXTEND;
                L_MENU_ITEMS(L_MENU_ITEMS.LAST) := RECORD_MENU(
                        R.ID,
                        R.ITEM_NAME,
                        R.SMALL_SIZE_PRICE,
                        R.DESCRIPTION,
                        R.ITEM_IMAGE
                    );
            END LOOP;

        RETURN L_MENU_ITEMS;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_MENU_ITEMS_PAGE;


    PROCEDURE ADD_TO_CART(
        P_CART_ID INT,
        P_MENU_ITEM_ID INT,
        P_MENU_ITEM_SIZE INT
    ) IS
        V_MENU_ITEM_INFO_ID INT;
        V_TOTAL_QUANTITY    INT;
    BEGIN
        SELECT SUM(ITEM_QUANTITY) INTO V_TOTAL_QUANTITY FROM CART_ITEM WHERE CART_ID = P_CART_ID;
        IF V_TOTAL_QUANTITY >= 10 THEN
            RAISE_APPLICATION_ERROR('-20001', 'Общее количество товаров в корзине не должно превышать 10 шт');
        END IF;
        BEGIN
            SELECT ITEM_INFO
            INTO V_MENU_ITEM_INFO_ID
            FROM CART_ITEM
            WHERE CART_ID = P_CART_ID
              AND ITEM_INFO =
                  (SELECT ID
                   FROM MENU_ITEM_INFO
                   WHERE MENU_ITEM_ID = P_MENU_ITEM_ID
                     AND MENU_ITEM_SIZE = P_MENU_ITEM_SIZE);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                V_MENU_ITEM_INFO_ID := NULL;
        END;
        IF V_MENU_ITEM_INFO_ID IS NOT NULL THEN
            UPDATE CART_ITEM
            SET ITEM_QUANTITY = ITEM_QUANTITY + 1
            WHERE CART_ID = P_CART_ID
              AND ITEM_INFO = V_MENU_ITEM_INFO_ID;
        ELSE
            V_MENU_ITEM_INFO_ID := INSERT_MENU_ITEM_INFO(P_MENU_ITEM_ID, P_MENU_ITEM_SIZE);

            INSERT INTO CART_ITEM (CART_ID, ITEM_INFO, ITEM_QUANTITY)
            VALUES (P_CART_ID, V_MENU_ITEM_INFO_ID, 1);
        END IF;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END ADD_TO_CART;
END USER_PACKAGE;