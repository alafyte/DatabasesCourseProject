CREATE OR REPLACE PACKAGE REST_ADMIN_PACKAGE AS
    FUNCTION GET_RESTAURANT_BY_ID(REST_ID INT) RETURN TABLE_RESTAURANT;
    FUNCTION GET_RESTAURANT_BY_ADMIN(ADMIN_ID INT) RETURN TABLE_RESTAURANT;
    FUNCTION GET_COURIER_BY_RESTAURANT(REST_ID INT) RETURN TABLE_COURIER;
    FUNCTION GET_COURIER_BY_ID(COURIER_ID INT) RETURN TABLE_COURIER;
    PROCEDURE INSERT_COURIER(
        FULL_NAME PERSONAL_DATA.FULL_NAME%TYPE,
        EMAIL PERSONAL_DATA.EMAIL%TYPE,
        PHONE_NUMBER PERSONAL_DATA.PHONE_NUMBER%TYPE,
        DATE_OF_BIRTH IN VARCHAR2,
        SALARY COURIER.SALARY%TYPE,
        RESTAURANT COURIER.RESTAURANT%TYPE
    );
    PROCEDURE UPDATE_COURIER(
        P_ID INT,
        P_SALARY COURIER.SALARY%TYPE DEFAULT NULL,
        P_ACTIVE NUMBER DEFAULT NULL,
        P_READY_TO_GO NUMBER DEFAULT NULL
    );
    PROCEDURE UPDATE_COURIER_AND_PERSONAL_DATA(
        P_ID INT,
        P_FULL_NAME NVARCHAR2 DEFAULT NULL,
        P_EMAIL VARCHAR2 DEFAULT NULL,
        P_PHONE_NUMBER VARCHAR2 DEFAULT NULL,
        P_DATE_OF_BIRTH VARCHAR2 DEFAULT NULL,
        P_SALARY COURIER.SALARY%TYPE DEFAULT NULL,
        P_ACTIVE NUMBER DEFAULT NULL,
        P_READY_TO_GO NUMBER DEFAULT NULL
    );
    PROCEDURE DELETE_COURIER(
        P_ID INT
    );
    FUNCTION GET_ORDERS_BY_RESTAURANT(P_REST_ID INT) RETURN TABLE_ORDER_REST;
END REST_ADMIN_PACKAGE;

CREATE OR REPLACE PACKAGE BODY REST_ADMIN_PACKAGE AS
    FUNCTION GET_RESTAURANT_BY_ID(REST_ID INT) RETURN TABLE_RESTAURANT IS
        V_RESULT TABLE_RESTAURANT := TABLE_RESTAURANT();
    BEGIN
        SELECT RECORD_RESTAURANT(
                       ID,
                       ADDRESS,
                       SDO_UTIL.TO_GEOJSON(LOCATION),
                       SDO_UTIL.TO_GEOJSON(COVERAGE_AREA),
                       RESTAURANT_ADMIN,
                       TO_CHAR(OPEN_TIME, 'HH24:MI'),
                       TO_CHAR(CLOSE_TIME, 'HH24:MI'),
                       TO_CHAR(DELIVERY_START_TIME, 'HH24:MI'),
                       TO_CHAR(DELIVERY_END_TIME, 'HH24:MI')
                   ) BULK COLLECT
        INTO V_RESULT
        FROM RESTAURANT
        WHERE RESTAURANT.ID = REST_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_RESTAURANT_BY_ID;

    FUNCTION GET_RESTAURANT_BY_ADMIN(ADMIN_ID INT) RETURN TABLE_RESTAURANT IS
        V_RESULT TABLE_RESTAURANT := TABLE_RESTAURANT();
    BEGIN
        SELECT RECORD_RESTAURANT(
                       ID,
                       ADDRESS,
                       SDO_UTIL.TO_GEOJSON(LOCATION),
                       SDO_UTIL.TO_GEOJSON(COVERAGE_AREA),
                       RESTAURANT_ADMIN,
                       TO_CHAR(OPEN_TIME, 'HH24:MI'),
                       TO_CHAR(CLOSE_TIME, 'HH24:MI'),
                       TO_CHAR(DELIVERY_START_TIME, 'HH24:MI'),
                       TO_CHAR(DELIVERY_END_TIME, 'HH24:MI')
                   ) BULK COLLECT
        INTO V_RESULT
        FROM RESTAURANT
        WHERE RESTAURANT.RESTAURANT_ADMIN = ADMIN_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_RESTAURANT_BY_ADMIN;

    FUNCTION GET_COURIER_BY_RESTAURANT(REST_ID INT) RETURN TABLE_COURIER IS
        V_RESULT TABLE_COURIER := TABLE_COURIER();
    BEGIN
        SELECT RECORD_COURIER(
                       COURIER.ID,
                       FULL_NAME,
                       EMAIL,
                       PHONE_NUMBER,
                       TO_CHAR(DATE_OF_BIRTH, 'DD-MM-YYYY'),
                       SALARY,
                       ACTIVE,
                       READY_TO_GO
                   ) BULK COLLECT
        INTO V_RESULT
        FROM COURIER
                 JOIN PERSONAL_DATA PD ON PD.ID = COURIER.PERSONAL_DATA
        WHERE COURIER.RESTAURANT = REST_ID
        ORDER BY FULL_NAME;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_COURIER_BY_RESTAURANT;

    FUNCTION GET_COURIER_BY_ID(COURIER_ID INT) RETURN TABLE_COURIER IS
        V_RESULT TABLE_COURIER := TABLE_COURIER();
    BEGIN
        SELECT RECORD_COURIER(
                       COURIER.ID,
                       FULL_NAME,
                       EMAIL,
                       PHONE_NUMBER,
                       TO_CHAR(DATE_OF_BIRTH, 'DD-MM-YYYY'),
                       SALARY,
                       ACTIVE,
                       READY_TO_GO
                   ) BULK COLLECT
        INTO V_RESULT
        FROM COURIER
                 JOIN PERSONAL_DATA PD ON PD.ID = COURIER.PERSONAL_DATA
        WHERE COURIER.ID = COURIER_ID;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_COURIER_BY_ID;

    PROCEDURE INSERT_COURIER(
        FULL_NAME PERSONAL_DATA.FULL_NAME%TYPE,
        EMAIL PERSONAL_DATA.EMAIL%TYPE,
        PHONE_NUMBER PERSONAL_DATA.PHONE_NUMBER%TYPE,
        DATE_OF_BIRTH IN VARCHAR2,
        SALARY COURIER.SALARY%TYPE,
        RESTAURANT COURIER.RESTAURANT%TYPE
    )
        IS
        USER_DATA_ID PERSONAL_DATA.ID%TYPE;
    BEGIN
        USER_DATA_ID :=
                USER_PACKAGE.INSERT_PERSONAL_DATA(FULL_NAME => FULL_NAME, EMAIL => EMAIL, PHONE_NUMBER => PHONE_NUMBER,
                                                  DATE_OF_BIRTH => DATE_OF_BIRTH);
        INSERT INTO COURIER (PERSONAL_DATA, SALARY, RESTAURANT)
        VALUES (USER_DATA_ID, SALARY, RESTAURANT);
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Произошла ошибка: ' || SQLERRM);
    END INSERT_COURIER;

    PROCEDURE UPDATE_COURIER(
        P_ID INT,
        P_SALARY COURIER.SALARY%TYPE DEFAULT NULL,
        P_ACTIVE NUMBER DEFAULT NULL,
        P_READY_TO_GO NUMBER DEFAULT NULL
    ) IS
        V_READY_TO_GO NUMBER := P_READY_TO_GO;
    BEGIN

        IF P_ACTIVE = 0 THEN
            V_READY_TO_GO := 0;
        END IF;

        UPDATE COURIER
        SET SALARY      = COALESCE(P_SALARY, SALARY),
            ACTIVE      = COALESCE(P_ACTIVE, ACTIVE),
            READY_TO_GO = COALESCE(V_READY_TO_GO, READY_TO_GO)
        WHERE ID = P_ID;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END UPDATE_COURIER;

    PROCEDURE UPDATE_COURIER_AND_PERSONAL_DATA(
        P_ID INT,
        P_FULL_NAME NVARCHAR2 DEFAULT NULL,
        P_EMAIL VARCHAR2 DEFAULT NULL,
        P_PHONE_NUMBER VARCHAR2 DEFAULT NULL,
        P_DATE_OF_BIRTH VARCHAR2 DEFAULT NULL,
        P_SALARY COURIER.SALARY%TYPE DEFAULT NULL,
        P_ACTIVE NUMBER DEFAULT NULL,
        P_READY_TO_GO NUMBER DEFAULT NULL
    ) IS
        PERSONAL_DATA_ID INT;
    BEGIN

        SELECT PERSONAL_DATA INTO PERSONAL_DATA_ID FROM COURIER WHERE COURIER.ID = P_ID;

        USER_PACKAGE.UPDATE_PERSONAL_DATA(PERSONAL_DATA_ID, P_FULL_NAME, P_EMAIL, P_PHONE_NUMBER, P_DATE_OF_BIRTH);


        UPDATE_COURIER(P_ID, P_SALARY, P_ACTIVE, P_READY_TO_GO);

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END UPDATE_COURIER_AND_PERSONAL_DATA;

    PROCEDURE DELETE_COURIER(
        P_ID INT
    ) IS
        V_COUNT         INT;
        V_PERSONAL_DATA INT;
    BEGIN
        SELECT COUNT(*) INTO V_COUNT FROM COURIER WHERE ID = P_ID;

        IF V_COUNT = 0 THEN
            RAISE_APPLICATION_ERROR('-20002', 'Курьер с указанным ID не существует.');
        END IF;
        SELECT PERSONAL_DATA INTO V_PERSONAL_DATA FROM COURIER WHERE COURIER.ID = P_ID;
        DELETE FROM COURIER WHERE ID = P_ID;
        DELETE FROM PERSONAL_DATA WHERE PERSONAL_DATA.ID = V_PERSONAL_DATA;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END DELETE_COURIER;

    FUNCTION GET_ORDERS_BY_RESTAURANT(P_REST_ID INT) RETURN TABLE_ORDER_REST IS
        V_RESULT TABLE_ORDER_REST := TABLE_ORDER_REST();
    BEGIN
        SELECT RECORD_ORDER_REST(
                       ID,
                       DATE_OF_ORDER,
                       PHONE_NUMBER,
                       ADDRESS
                   ) BULK COLLECT
        INTO V_RESULT
        FROM GET_ORDERS_INFO
        WHERE REST_ID = P_REST_ID ORDER BY ID DESC;

        RETURN V_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR('-20001', 'Произошла ошибка: ' || SQLERRM);
    END GET_ORDERS_BY_RESTAURANT;

END REST_ADMIN_PACKAGE;